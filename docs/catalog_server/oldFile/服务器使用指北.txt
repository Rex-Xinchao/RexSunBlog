说明：
使用的服务器镜像为Ubuntu 18.04 server 64bit。
所有安装的服务都是通过docker镜像化


第一节；docker安装
1、推荐方法-直接使用官方安装脚本：
curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun

2、手动安装：
##更新apt索引
sudo apt-get update
##安装apt依赖包，允许apt通过https使用存储库
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
##添加docker秘钥
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
##验证密钥（非必要）
sudo apt-key fingerprint 0EBFCD88
##设置稳定版仓库
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
##安装docker
sudo apt-get update
sudo apt-get install docker docker-ce 或者 sudo apt-get install docker docker-compose

第二节：gitlab安装
1、安装命令：
sudo docker run --detach \
    --hostname 121.36.201.82 \
    --publish 8443:443 --publish 8880:80 --publish 8222:22 \
    --name gitlab \
    --restart always \
    --volume /srv/gitlab/config:/etc/gitlab \
    --volume /srv/gitlab/logs:/var/log/gitlab \
    --volume /srv/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce:latest

	
##参数说明：
--detach: 设置容器后台运行
--hostname: 设置容器的 hostname
--publish: 端口转发规则（将http:443映射到外部端口8443；将web:80映射到外部端口8880；将ssh:22端口映射到外部端口8222）
--name：容器名称
--restart always：每次启动容器就重启GitLab
--volume: 共享目录挂载，即 docker 容器内外数据共享（/srv/gitlab/data: 应用程序数据，/srv/gitlab/logs：GitLab 的 log，/srv/gitlab/config：GitLab 的配置文件）
--privileged=true：是容器内获得root真正权限??
--e：配置 Gitlab 运行的环境变量
2、查看运行状态
docker ps
3、查看url-- 121.36.201.82:8880
4、gitlab配置
https://segmentfault.com/a/1190000021593151


第三节：jenkins安装
1、查看jenkins镜像
docker serch jenkins
2、下载镜像
docker pull jenkins/blueocean(官方推荐)
3、查看镜像
docker images
4、运行镜像
sudo docker run \
    --name jenkins-blueocean \
    -d \
    -p 8081:8080 \
    -p 50000:50000 \
    -v jenkins-data:/var/jenkins_home \
    gitlab/gitlab-ce:latest
4、查看运行状态
docker ps
5、jenkins配置
https://www.jianshu.com/p/0391e225e4a6

第四节：nginx安装
1、获取并拉取镜像
docker search nginx
docker pull nginx
2、创建容器
docker run -d --name mynginx -p 80:80 nginx:latest
3、修改nginx配置文件
*：docker exec -it ef /bin/bash
-- it i-->交互式操作 t-->终端
-- ef 容器ID
-- /bin/bash 指定执行命令的shell
*：cd /etc/nginx
*：ls -l
*：然后修改nginx.conf文件即可
*：exit 退出容器
	
第五节：docker发布程序-node
1、准备文件
Dockerfile/directories/程序代码
注意：dockerfile RUN echo "/usr/src/app" npm install --> 进入/usr/src/app文件夹并执行npm install
注意：dockerfile 复制文件不会复制文件夹 --> COPY model ./model(复制model文件夹下文件并放在model文件夹下)
2、进入服务器目录并生成镜像
cd ../home/backend
docker image build ./ -t daydayup:1.0.0
3、生成并启动容器
docker container create --name daydayup -p 3000:3000 daydayup:1.0.0
-3000:3000 第一个3000是终端端口，第二个容器端口
docker container start xxxxx(容器id)
4、dockerfile展示
# 依赖node
FROM node:12
# 创建文件夹
WORKDIR /usr/src/app
# 复制全部文件进入文件夹
COPY . .
# 安装依赖
RUN npm install pm2 -g
RUN whereis pm2
RUN npm install
EXPOSE 3000
# 执行pm2 ./bin/www
CMD [ "pm2-runtime", "./bin/www" ]

第五节：docker发布程序-web
1、准备文件
##dockerfile:
FROM nginx:1.17.9-alpine

COPY web /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80/tcp 443/tcp

CMD ["nginx", "-g", "daemon off;"]

##nginx.conf:
user nginx;
worker_processes auto;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {
	sendfile on;
	keepalive_timeout 65;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;
		
	server {
        listen 80;
        server_name localhost;
		
		location /api/ {
            proxy_pass http://121.36.201.82:3000/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;
        }
		
		location / {
            root   /usr/share/nginx/html;
            index  index.html;
        }
    }
注意：用户指定nginx (useradd nginx 不清楚要不要添加用户，待确认)
2、后面生成镜像和容器的代码和上面一样

	
	
	
	