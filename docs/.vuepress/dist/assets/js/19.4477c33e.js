(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{219:function(e,n,t){"use strict";t.r(n);var a=t(0),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"自动化更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动化更新"}},[e._v("#")]),e._v(" 自动化更新")]),e._v(" "),t("ul",[t("li",[e._v("安装 electron-updater 包模块")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install electron-updater --save\n")])])]),t("ul",[t("li",[e._v("配置package.json文件的build-publish参数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' "publish": [\n      {\n        "provider": "generic",\n        "url": "http://**.**.**.**:3002/download/",//更新服务器地址,可为空\n      }\n    ]\n')])])]),t("ul",[t("li",[e._v("配置package.json文件的build-nsis参数（可省略）")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Tips")]),e._v(" "),t("p",[e._v("nsis配置不会影响自动更新功能，但是可以优化用户体验，比如是否允许用户自定义安装位置、是否添加桌面快捷方式、安装完成是否立即启动、配置安装图标等。nsis 配置也是添加在 build 参数中。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.electron.build/configuration/nsis,",title:"nsis官网",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"nsis": {\n      "oneClick": true,\n      "perMachine": true,\n      "allowElevation": true,\n      "allowToChangeInstallationDirectory": true,\n      "createDesktopShortcut": true,\n      "runAfterFinish": true,\n      "installerIcon": "./build/icon.ico",\n      "uninstallerIcon": "./build/icon.ico"\n    },\n')])])]),t("ul",[t("li",[e._v("配置主进程")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { app, BrowserWindow, ipcMain } from 'electron'\n\n// 注意这个autoUpdater不是electron中的autoUpdater\nimport { autoUpdater } from \"electron-updater\"\n// 更新服务器地址，比如\"http://**.**.**.**:3002/download/\"\nimport {uploadUrl} from \"../renderer/config/config\";\n\n// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写\nfunction updateHandle() {\n  let message = {\n    error: '检查更新出错',\n    checking: '正在检查更新……',\n    updateAva: '检测到新版本，正在下载……',\n    updateNotAva: '现在使用的就是最新版本，不用更新',\n  };\n  const os = require('os');\n\n  autoUpdater.setFeedURL(uploadUrl);\n  autoUpdater.on('error', function (error) {\n    sendUpdateMessage(message.error)\n  });\n  autoUpdater.on('checking-for-update', function () {\n    sendUpdateMessage(message.checking)\n  });\n  autoUpdater.on('update-available', function (info) {\n    sendUpdateMessage(message.updateAva)\n  });\n  autoUpdater.on('update-not-available', function (info) {\n    sendUpdateMessage(message.updateNotAva)\n  });\n\n  // 更新下载进度事件\n  autoUpdater.on('download-progress', function (progressObj) {\n    mainWindow.webContents.send('downloadProgress', progressObj)\n  })\n  autoUpdater.on('update-downloaded', function (event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) {\n\n    ipcMain.on('isUpdateNow', (e, arg) =&gt; {\n      console.log(arguments);\n      console.log(\"开始更新\");\n      //some code here to handle event\n      autoUpdater.quitAndInstall();\n    });\n\n    mainWindow.webContents.send('isUpdateNow')\n  });\n\n  ipcMain.on(\"checkForUpdate\",()=&gt;{\n      //执行自动更新检查\n      autoUpdater.checkForUpdates();\n  })\n}\n\n// 通过main进程发送事件给renderer进程，提示更新信息\nfunction sendUpdateMessage(text) {\n  mainWindow.webContents.send('message', text)\n}\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Tips")]),e._v(" "),t("p",[e._v("添加完成后，在主进程createWindow中需要调用一下updateHandle()。")])]),e._v(" "),t("ul",[t("li",[e._v("在视图（View）层中触发自动更新，并添加自动更新事件的监听")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ipcRenderer.send("checkForUpdate");\n')])])]),t("ul",[t("li",[e._v("监听自动更新事件：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  import { ipcRenderer } from "electron";\n  ipcRenderer.on("message", (event, text) =&gt; {\n            console.log(arguments);\n            this.tips = text;\n        });\n        //注意：“downloadProgress”事件可能存在无法触发的问题，只需要限制一下下载网速就好了\n        ipcRenderer.on("downloadProgress", (event, progressObj)=&gt; {\n            console.log(progressObj);\n            this.downloadPercent = progressObj.percent || 0;\n        });\n        ipcRenderer.on("isUpdateNow", () =&gt; {\n            ipcRenderer.send("isUpdateNow");\n        });\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);